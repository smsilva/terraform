#!/bin/bash
set -e

SOURCE_DIRECTORY="${1-../../src}"
PROVIDER_FILE="${SOURCE_DIRECTORY}/provider.tf"
BUILD_CONFIGURATION_FILE="src/build.conf"

if [ ! -e "${SOURCE_DIRECTORY?}" ]; then
  echo "Source Code Directory doesn't exists: ${SOURCE_DIRECTORY}"
  exit 1
fi

if [ ! -e "${PROVIDER_FILE?}" ]; then
  echo "Provider file doesn't exists: ${PROVIDER_FILE?}"
  exit 1
fi

echo ""
echo "Stack Build Settings"
echo ""
echo "  source_code_directory..: ${SOURCE_DIRECTORY}"

rm -rf src/
cp -R "${SOURCE_DIRECTORY?}" "src"

if [ ! -e "${BUILD_CONFIGURATION_FILE?}" ]; then
  echo "File not found: ${BUILD_CONFIGURATION_FILE?}. Did you download build scripts into Stack Source Code directory?"
  exit 1
fi

# Read Stack Build Configuration
source "${BUILD_CONFIGURATION_FILE?}"

# Read Stack Base Variables (STACK_NAME, STACK_VERSION, ENVIRONMENT_NAME and REGION)
. ../scripts/loadconfig src/terraform.tfvars

export TERRAFORM_VERSION=${TERRAFORM_VERSION?}

echo "  name...................: ${STACK_NAME?}"
echo "  version................: ${STACK_VERSION?}"
echo "  terraform_version......: ${TERRAFORM_VERSION?}"
echo ""

# Generate stack.conf file
envsubst < templates/stack.conf > stack.conf

# Generate Dockerfile
envsubst < templates/Dockerfile > Dockerfile

# Generate Azure Resource Manager Variables file
envsubst < templates/azurerm.conf > azurerm.conf

# Copy ssh_key to access Git Repository and download Modules if needed
cp -R "${HOME?}/.ssh" .

# Build Docker Image
docker build -t ${STACK_NAME?}:${STACK_VERSION?} .

# Clear File System
rm -rf .ssh
rm -rf Dockerfile
rm -rf azurerm.conf
rm -rf stack.conf
rm -rf src/

# Clear Intermediate Docker Images
docker system prune -f > /dev/null
docker images | grep -E "REPOSITORY|${STACK_NAME?}.*${STACK_VERSION?}"
